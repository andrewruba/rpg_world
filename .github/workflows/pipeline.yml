name: Build, Lint, Test, and Publish Results

on: [push, pull_request]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
    # Step 1: Check out the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up Python 3.12
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # Step 3: Add Conda to system path
    - name: Add conda to system path
      run: |
        echo $CONDA/bin >> $GITHUB_PATH

    # Step 4: Create and activate the Conda environment
    - name: Create and activate conda environment
      run: |
        conda env create --file environment.yml
      shell: bash

    # Step 5: Set execute permissions for CI scripts
    - name: Set execute permissions for CI scripts
      run: |
        chmod +x scripts/*.sh

    # Step 6: Build Python package and install
    - name: Build Python wheel
      run: |
        eval "$(conda shell.bash hook)"
        conda activate rpg_world_env
        scripts/build_and_install.sh

    # Step 7: Run linter (pycodestyle and pyflakes or any custom style guide)
    - name: Run linter and style checks
      run: |
        eval "$(conda shell.bash hook)"
        conda activate rpg_world_env
        scripts/lint_and_style.sh

    # Step 8: Run unit tests with pytest
    - name: Run unit tests
      run: |
        eval "$(conda shell.bash hook)"
        conda activate rpg_world_env
        scripts/test.sh

    # Step 9: Publish unit test results (JUnit format)
    - name: Publish test results
      if: ${{ !cancelled() }}
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: |
          junit/test-results.xml

    # Step 10: Generate code coverage markdown and write to job summary
    - name: Generate and publish coverage markdown
      if: ${{ !cancelled() }}
      uses: ./.github/actions/publish-cov-results  # Custom action from your repository
      with:
        badge: true
        filename: coverage.xml  # Ensure this file is generated by ci/test.sh
        format: "markdown"
        output: "both"

    # Step 11: Write code coverage summary to job summary
    - name: Write coverage to job summary
      run: |
        echo -e "# Code Coverage Report\n" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    # Step 12: Upload test result artifacts for debugging (in case of test failures)
    - name: Upload test result artifacts
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage-test-failures
        path: ${{ runner.temp }}/package
